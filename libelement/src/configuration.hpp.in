#pragma once

#include <type_traits>

//http://blog.bitwigglers.org/using-enum-classes-as-type-safe-bitmasks/
enum class log_flags : int {
	none = 0,
	debug = 1,
	output_tokens = 2,
 	output_ast = 4,
	output_ast_node_as_code = 8,
	output_expression_tree = 16,
	output_prelude = 32,
//	debug = 32,
//	debug = 64,
//	debug = 128,
//	debug = 256,
};

constexpr log_flags operator|(log_flags lhs, log_flags rhs) 
{
    return static_cast<log_flags>(
		static_cast<std::underlying_type<log_flags>::type>(lhs) | 
		static_cast<std::underlying_type<log_flags>::type>(rhs)
	);
}

constexpr log_flags operator&(log_flags lhs, log_flags rhs) 
{
    return static_cast<log_flags>(
		static_cast<std::underlying_type<log_flags>::type>(lhs) & 
		static_cast<std::underlying_type<log_flags>::type>(rhs)
	);
}

constexpr bool flag_set(const log_flags input_flags, const log_flags flags) 
{
    return static_cast<int>(input_flags & flags);
}

constexpr log_flags logging_bitmask = @LOG_VERBOSITY@;
//#define LOG_VERBOSITY (@LOG_VERBOSITY@)